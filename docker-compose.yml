x-airflow-common: &airflow-common
  build:
    context: ./airflow
    dockerfile: Dockerfile
  env_file:
    - .env
  environment:
    - AIRFLOW__CORE__EXECUTOR=${AIRFLOW__CORE__EXECUTOR}
    - AIRFLOW__CORE__FERNET_KEY={AIRFLOW__CORE__FERNET_KEY}
    - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW__WEBSERVER__SECRET_KEY}
    - AIRFLOW__CORE__DEFAULT_TIMEZONE=${AIRFLOW__CORE__DEFAULT_TIMEZONE}
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}

services:
  # Django web application
  web:
    build: .
    ports:
      - 8000:8000
    env_file:
      - .env
    environment:
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
    volumes:
      - ./src:/app/src
    restart: unless-stopped

  # PostgreSQL database
  # db:
  #   image: postgres:16.8
  #   environment:
  #     POSTGRES_DB: ${DATABASE_NAME}
  #     POSTGRES_USER: ${DATABASE_USER}
  #     POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
  #   ports:
  #     - 5432:5432
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data/
  #   healthcheck:
  #     test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USER}" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #   restart: unless-stopped

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    restart: unless-stopped
    ports:
      - 8080:8080
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    depends_on:
      airflow-init:
        condition: service_completed_successfully
  # Airflow scheduler
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: unless-stopped
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    depends_on:
      - airflow-webserver
  # Airflow initialization
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command: >
      -c " sleep 10 && airflow db migrate && airflow users create --username ${ADMIN_USERNAME} --firstname Admin --lastname User --role Admin --email ${ADMIN_EMAIL} --password ${ADMIN_PASSWORD} "

volumes:
  postgres_data: # Database data